/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* makes every browser render page the exact same way */
/* normalize css is not really necessary */
/* universal selector selects every element on the pg and applies declarations to them */
/* - this allows us to start clean (w/out browser adding margin or padding */
* {
  margin: 0;
  padding: 0;
  /* changes box model so borders and padding no longer added to h and w specified for a box */
  box-sizing: border-box;
}

/* font in body because props related to fonts are usually inherited */
/* font-family set on body element so all child elements are inherited */
/* better practice to put font inside body */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  /* bigger than predefined line height */
  line-height: 1.7;
  color: #777;
  /* white border around entire webpage */
  padding: 30px;
}

.header {
  /* every point heigh of element should be 95% of viewport height */
  height: 95vh;
  /* to specify gradients always use bg img property */
  /* two bg image sone on top of the other */
  /*  can specify two directions */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  /* ensures whatever viewport size, img will always stay at top of container */
  background-position: top;
  /* specify what part of the img we want visible */
  /* moves clockwise (from top left corner) */
  /* 0 0 we don't want the top left corner to change */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.logo-box {
  position: absolute;
  /* where does 40px starts? ref is parent element with position set to relative */
  /*  - header is parent element */
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
  /* width will scale accordingly by browser (could do vice versa) */
}

.text-box {
  position: absolute;
  /* top and left are in relation to parent element */
  top: 40%;
  left: 50%;
  /* these 50% are no longer in relation to parent element but the element itself */
  transform: translate(-50%, -50%);
}

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;

  /* determines whether back part is hidden or shown to user */
  /* helps with 'shaky' animation */
  backface-visibility: hidden;
}

.heading-primary-main {
  /* block width occupies entire line avl and create line breaks */
  /* span is inline element by default */
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  animation: moveInRight 1s ease-out;
  /* animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out; */
}

/************************
* A N I M A T I O N S *
*************************/

/* header primary main */
/* specify what you want to happen in each moment in time of event */
/* for browser performance best to animate only opacity and transform */
@keyframes moveInLeft {
  /* start */
  0% {
    opacity: 0;
    /* 'X' to animate in x direction */
    /* transform: translateX(-100px) rotate(50deg); */
    transform: translateX(-100px);
  }

  /* 60% {
    transform: rotate(120deg);
  } */

  /* can put stuff in the middle */
  /* positive values go to the right side */
  /* negative values go to the left side */
  80% {
    transform: translateX(10px);
  }

  /* finish */
  100% {
    opacity: 1;
    /* 0 allows it to look how it does before animation */
    transform: translate(0);
  }
}

@keyframes moveInRight {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}
