/* moved code into main.scss (easier to convert original css into Sass */
/* change CSS to styles.css (this file is for notes only) */

/*
COLORS:
Light: #7ed56f
Medium: #55c57a
Dark: #28b485
*/

/* makes every browser render page the exact same way */
/* normalize css is not really necessary */
/* universal selector selects every element on the pg and applies declarations to them */
/* - this allows us to start clean (w/out browser adding margin or padding */
*,
/* only real elements get inherit behavior while pseudo elements do not so must be included */
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* changes box model so borders and padding no longer added to h and w specified for a box */
  /* box-sizing: border-box; */
  /* when we can use inheritance, we should instead of universal selector */
  /* Forcing inheritance by setting box-sizing property to each element on the page */
  box-sizing: inherit;
}

/* setting root font size so we can change all over measures to rems */
/* changing global setting (font size) */
/* root font size set in html selector */
/* why 10? 1 rem = 10px (to make life easier to replace px units) */
html {
  /* shouldn't be px because changing overrides browsers font size setting */
  /* - if keeping px, people can't change default font size */
  /* px is bad practice */
  /* font-size: 10px; */
  /* 100% is 16px (default) */
  /* We want 10px so 10/16 is 62.5% */
  font-size: 62.5%;
}

/* font in body because props related to fonts are usually inherited */
/* font-family set on body element so all child elements are inherited */
/* better practice to put font inside body */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  /* bigger than predefined line height */
  line-height: 1.7;
  color: #777;
  /* white border around entire webpage */
  /* padding: 30px; */
  padding: 3rem;
  /* better practice (see inheritance notes above in universal selector */
  box-sizing: border-box;
}

.header {
  /* every point heigh of element should be 95% of viewport height */
  height: 95vh;
  /* to specify gradients always use bg img property */
  /* two bg image sone on top of the other */
  /*  can specify two directions */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  /* ensures whatever viewport size, img will always stay at top of container */
  background-position: top;
  /* specify what part of the img we want visible */
  /* moves clockwise (from top left corner) */
  /* 0 0 we don't want the top left corner to change */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.header__logo-box {
  position: absolute;
  /* where does 40px starts? ref is parent element with position set to relative */
  /*  - header is parent element */
  /* top: 40px; */
  /* left: 40px; */
  top: 4rem;
  left: 4rem;
}

.header__logo {
  /* height: 35px; */
  height: 3.5rem;
  /* width will scale accordingly by browser (could do vice versa) */
}

.header__text-box {
  position: absolute;
  /* top and left are in relation to parent element */
  top: 40%;
  left: 50%;
  /* these 50% are no longer in relation to parent element but the element itself */
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;

  /* determines whether back part is hidden or shown to user */
  /* helps with 'shaky' animation */
  backface-visibility: hidden;
  /* margin-bottom: 60px; */
  margin-bottom: 6rem;
}

.heading-primary--main {
  /* block width occupies entire line avl and create line breaks */
  /* span is inline element by default */
  display: block;
  /* font-size: 60px; */
  font-size: 6rem;
  font-weight: 400;
  /* letter-spacing: 35px; */
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
}

.heading-primary--sub {
  display: block;
  /* font-size: 20px; */
  font-size: 2rem;
  font-weight: 700;
  /* letter-spacing: 17.4px; */
  letter-spacing: 1.75rem;

  animation: moveInRight 1s ease-out;
  /* animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out; */
}

/* :link is pseudo class */
/* - special state of selector */
/* pseudo classes used to style elements under special condition */
/*  :link special state of selector when it's an anchor element*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  /* padding: 15px 40px; */
  padding: 1.5rem 4rem;
  /* box model works as if element is normal block element */
  /* always want to do if want to give padding or height or width to elements */
  /* btn is centered up in text-box (above) */
  display: inline-block;
  /* border-radius: 100px; */
  border-radius: 10rem;
  /* which properties to animate? all if we don't want to write it out or not sure */
  /* transition property on initial state */
  transition: all, 0.2s;
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  /* neg moves up and positive moves down (y is top to bottom) */
  transform: translateY(-3px);
  /* box-shadow can take several props */
  /* - offset in x direction, y, blur, color */
  /* box-shadow: 0 10px 20px rgba(0, 0, 0, .2); */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  /* translate in relation to initial link state above */
  transform: translateY(-1px);
  /* changing values so when user presses button, shadow changes from above values */
  /* box-shadow: 0 5px 10px rgba(0, 0, 0, .2); */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #fff;
  color: #777;
}

/* pseudo elements allows us to style certain parts of elements */
/* ::after acts like virtual element right after element we are selecting */
/* - we can then style this element */
/* ::after pseudo element treated as child */
.btn::after {
  /* must specific content or else ::after won't appear */
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  /* border-radius: 100px; */
  border-radius: 10rem;
  /* absolute must have reference */
  /* - reference is first element with relative position it can find */
  /* - we want this element to be the btn instead of header so must set btn position: relative */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* transition property on initial state */
  transition: all 0.4s;
}

.btn--white::after {
  background-color: #fff;
}

.btn:hover::after {
  /* 2 is double size from before */
  /* scale without x or y scales entire element */
  transform: scaleX(1.4) scaleY(1.6);
  /* opacity 0 sets something to zero. Allows it to fade out */
  opacity: 0;
}

.btn--animated {
  /* .75s is a delay */
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* automatically apply 0% styles before animation starts */
  animation-fill-mode: backwards;
}

/************************
* A N I M A T I O N S *
*************************/

/* header primary main */
/* specify what you want to happen in each moment in time of event */
/* for browser performance best to animate only opacity and transform */
@keyframes moveInLeft {
  /* start */
  0% {
    opacity: 0;
    /* 'X' to animate in x direction */
    /* transform: translateX(-100px) rotate(50deg); */
    /* transform: translateX(-100px); */
    transform: translateX(-10rem);
  }

  /* 60% {
    transform: rotate(120deg);
  } */

  /* can put stuff in the middle */
  /* positive values go to the right side */
  /* negative values go to the left side */
  80% {
    /* transform: translateX(10px); */
    transform: translateX(1rem);
  }

  /* finish */
  100% {
    opacity: 1;
    /* 0 allows it to look how it does before animation */
    transform: translate(0);
  }
}

@keyframes moveInRight {
  /* start */
  0% {
    opacity: 0;
    /* transform: translateX(100px); */
    transform: translateX(10rem);
  }

  80% {
    /* transform: translateX(-10px); */
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  /* start */
  /* animation 0% styles applied before animations starts. */
  0% {
    opacity: 0;
    /* transform: translateY(30px); */
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}
